/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DemoResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ESCROW_FACTORY"
      | "LOP"
      | "executeSwap"
      | "getLockedBalance"
      | "recoverETH"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SwapExecuted"): EventFragment;

  encodeFunctionData(
    functionFragment: "ESCROW_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LOP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [BytesLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ESCROW_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LOP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    maker: AddressLike,
    escrow: AddressLike,
    orderHash: BytesLike,
    amount: BigNumberish,
    safetyDeposit: BigNumberish
  ];
  export type OutputTuple = [
    maker: string,
    escrow: string,
    orderHash: string,
    amount: bigint,
    safetyDeposit: bigint
  ];
  export interface OutputObject {
    maker: string;
    escrow: string;
    orderHash: string;
    amount: bigint;
    safetyDeposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DemoResolver extends BaseContract {
  connect(runner?: ContractRunner | null): DemoResolver;
  waitForDeployment(): Promise<this>;

  interface: DemoResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ESCROW_FACTORY: TypedContractMethod<[], [string], "view">;

  LOP: TypedContractMethod<[], [string], "view">;

  executeSwap: TypedContractMethod<
    [
      orderHash: BytesLike,
      amount: BigNumberish,
      safetyDeposit: BigNumberish,
      maker: AddressLike
    ],
    [void],
    "payable"
  >;

  getLockedBalance: TypedContractMethod<[], [bigint], "view">;

  recoverETH: TypedContractMethod<[], [void], "nonpayable">;

  withdrawETH: TypedContractMethod<
    [amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ESCROW_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LOP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeSwap"
  ): TypedContractMethod<
    [
      orderHash: BytesLike,
      amount: BigNumberish,
      safetyDeposit: BigNumberish,
      maker: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getLockedBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recoverETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;

  filters: {
    "SwapExecuted(address,address,bytes32,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
  };
}
