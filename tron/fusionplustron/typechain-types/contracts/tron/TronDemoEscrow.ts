/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace TronDemoEscrow {
  export type DemoImmutablesStruct = {
    orderHash: BytesLike;
    hashlock: BytesLike;
    maker: BigNumberish;
    taker: BigNumberish;
    token: BigNumberish;
    amount: BigNumberish;
    safetyDeposit: BigNumberish;
    timelocks: BigNumberish;
  };

  export type DemoImmutablesStructOutput = [
    orderHash: string,
    hashlock: string,
    maker: bigint,
    taker: bigint,
    token: bigint,
    amount: bigint,
    safetyDeposit: bigint,
    timelocks: bigint
  ] & {
    orderHash: string;
    hashlock: string;
    maker: bigint;
    taker: bigint;
    token: bigint;
    amount: bigint;
    safetyDeposit: bigint;
    timelocks: bigint;
  };
}

export interface TronDemoEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancel"
      | "createDstEscrow"
      | "escrowBalances"
      | "escrowExists"
      | "escrowExistsCheck"
      | "escrows"
      | "getContractBalance"
      | "getEscrow"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DemoEscrowCreated" | "DemoEscrowWithdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "createDstEscrow",
    values: [TronDemoEscrow.DemoImmutablesStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowBalances",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowExistsCheck",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDstEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowExistsCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DemoEscrowCreatedEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    amount: BigNumberish,
    safetyDeposit: BigNumberish,
    creator: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    orderHash: string,
    amount: bigint,
    safetyDeposit: bigint,
    creator: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    orderHash: string;
    amount: bigint;
    safetyDeposit: bigint;
    creator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DemoEscrowWithdrawnEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    amount: BigNumberish,
    recipient: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    orderHash: string,
    amount: bigint,
    recipient: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    orderHash: string;
    amount: bigint;
    recipient: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TronDemoEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): TronDemoEscrow;
  waitForDeployment(): Promise<this>;

  interface: TronDemoEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancel: TypedContractMethod<[orderHash: BytesLike], [void], "nonpayable">;

  createDstEscrow: TypedContractMethod<
    [
      dstImmutables: TronDemoEscrow.DemoImmutablesStruct,
      srcCancellationTimestamp: BigNumberish
    ],
    [void],
    "payable"
  >;

  escrowBalances: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  escrowExists: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  escrowExistsCheck: TypedContractMethod<
    [orderHash: BytesLike],
    [boolean],
    "view"
  >;

  escrows: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        orderHash: string;
        hashlock: string;
        maker: bigint;
        taker: bigint;
        token: bigint;
        amount: bigint;
        safetyDeposit: bigint;
        timelocks: bigint;
      }
    ],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getEscrow: TypedContractMethod<
    [orderHash: BytesLike],
    [[TronDemoEscrow.DemoImmutablesStructOutput, bigint]],
    "view"
  >;

  withdraw: TypedContractMethod<
    [orderHash: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[orderHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createDstEscrow"
  ): TypedContractMethod<
    [
      dstImmutables: TronDemoEscrow.DemoImmutablesStruct,
      srcCancellationTimestamp: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "escrowBalances"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "escrowExists"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "escrowExistsCheck"
  ): TypedContractMethod<[orderHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        orderHash: string;
        hashlock: string;
        maker: bigint;
        taker: bigint;
        token: bigint;
        amount: bigint;
        safetyDeposit: bigint;
        timelocks: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEscrow"
  ): TypedContractMethod<
    [orderHash: BytesLike],
    [[TronDemoEscrow.DemoImmutablesStructOutput, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [orderHash: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DemoEscrowCreated"
  ): TypedContractEvent<
    DemoEscrowCreatedEvent.InputTuple,
    DemoEscrowCreatedEvent.OutputTuple,
    DemoEscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DemoEscrowWithdrawn"
  ): TypedContractEvent<
    DemoEscrowWithdrawnEvent.InputTuple,
    DemoEscrowWithdrawnEvent.OutputTuple,
    DemoEscrowWithdrawnEvent.OutputObject
  >;

  filters: {
    "DemoEscrowCreated(bytes32,uint256,uint256,address,uint256)": TypedContractEvent<
      DemoEscrowCreatedEvent.InputTuple,
      DemoEscrowCreatedEvent.OutputTuple,
      DemoEscrowCreatedEvent.OutputObject
    >;
    DemoEscrowCreated: TypedContractEvent<
      DemoEscrowCreatedEvent.InputTuple,
      DemoEscrowCreatedEvent.OutputTuple,
      DemoEscrowCreatedEvent.OutputObject
    >;

    "DemoEscrowWithdrawn(bytes32,uint256,address,uint256)": TypedContractEvent<
      DemoEscrowWithdrawnEvent.InputTuple,
      DemoEscrowWithdrawnEvent.OutputTuple,
      DemoEscrowWithdrawnEvent.OutputObject
    >;
    DemoEscrowWithdrawn: TypedContractEvent<
      DemoEscrowWithdrawnEvent.InputTuple,
      DemoEscrowWithdrawnEvent.OutputTuple,
      DemoEscrowWithdrawnEvent.OutputObject
    >;
  };
}
