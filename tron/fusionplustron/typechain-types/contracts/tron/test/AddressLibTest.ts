/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface AddressLibTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "testAddressGet"
      | "testMultipleConversions"
      | "testRoundTripConversion"
      | "testZeroAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddressConversion" | "AddressValidation"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "testAddressGet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testMultipleConversions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRoundTripConversion",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testZeroAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "testAddressGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMultipleConversions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRoundTripConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testZeroAddress",
    data: BytesLike
  ): Result;
}

export namespace AddressConversionEvent {
  export type InputTuple = [
    input: BigNumberish,
    output: AddressLike,
    success: boolean
  ];
  export type OutputTuple = [input: bigint, output: string, success: boolean];
  export interface OutputObject {
    input: bigint;
    output: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddressValidationEvent {
  export type InputTuple = [
    input: AddressLike,
    output: BigNumberish,
    reconverted: AddressLike
  ];
  export type OutputTuple = [
    input: string,
    output: bigint,
    reconverted: string
  ];
  export interface OutputObject {
    input: string;
    output: bigint;
    reconverted: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AddressLibTest extends BaseContract {
  connect(runner?: ContractRunner | null): AddressLibTest;
  waitForDeployment(): Promise<this>;

  interface: AddressLibTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  testAddressGet: TypedContractMethod<
    [addressAsUint: BigNumberish],
    [[string, boolean] & { converted: string; success: boolean }],
    "nonpayable"
  >;

  testMultipleConversions: TypedContractMethod<
    [token: BigNumberish, maker: BigNumberish, taker: BigNumberish],
    [
      [string, string, string, boolean] & {
        tokenAddr: string;
        makerAddr: string;
        takerAddr: string;
        allSuccess: boolean;
      }
    ],
    "nonpayable"
  >;

  testRoundTripConversion: TypedContractMethod<
    [inputAddress: AddressLike],
    [
      [bigint, string, boolean] & {
        output: bigint;
        reconverted: string;
        matches: boolean;
      }
    ],
    "nonpayable"
  >;

  testZeroAddress: TypedContractMethod<
    [],
    [
      [bigint, string, boolean] & {
        zeroAsUint: bigint;
        convertedBack: string;
        isZero: boolean;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "testAddressGet"
  ): TypedContractMethod<
    [addressAsUint: BigNumberish],
    [[string, boolean] & { converted: string; success: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testMultipleConversions"
  ): TypedContractMethod<
    [token: BigNumberish, maker: BigNumberish, taker: BigNumberish],
    [
      [string, string, string, boolean] & {
        tokenAddr: string;
        makerAddr: string;
        takerAddr: string;
        allSuccess: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testRoundTripConversion"
  ): TypedContractMethod<
    [inputAddress: AddressLike],
    [
      [bigint, string, boolean] & {
        output: bigint;
        reconverted: string;
        matches: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testZeroAddress"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, boolean] & {
        zeroAsUint: bigint;
        convertedBack: string;
        isZero: boolean;
      }
    ],
    "nonpayable"
  >;

  getEvent(
    key: "AddressConversion"
  ): TypedContractEvent<
    AddressConversionEvent.InputTuple,
    AddressConversionEvent.OutputTuple,
    AddressConversionEvent.OutputObject
  >;
  getEvent(
    key: "AddressValidation"
  ): TypedContractEvent<
    AddressValidationEvent.InputTuple,
    AddressValidationEvent.OutputTuple,
    AddressValidationEvent.OutputObject
  >;

  filters: {
    "AddressConversion(uint256,address,bool)": TypedContractEvent<
      AddressConversionEvent.InputTuple,
      AddressConversionEvent.OutputTuple,
      AddressConversionEvent.OutputObject
    >;
    AddressConversion: TypedContractEvent<
      AddressConversionEvent.InputTuple,
      AddressConversionEvent.OutputTuple,
      AddressConversionEvent.OutputObject
    >;

    "AddressValidation(address,uint256,address)": TypedContractEvent<
      AddressValidationEvent.InputTuple,
      AddressValidationEvent.OutputTuple,
      AddressValidationEvent.OutputObject
    >;
    AddressValidation: TypedContractEvent<
      AddressValidationEvent.InputTuple,
      AddressValidationEvent.OutputTuple,
      AddressValidationEvent.OutputObject
    >;
  };
}
