/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface TronCreate2TestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "compareCreate2Methods"
      | "testComputeAddress"
      | "testDeployment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddressComputed" | "DeploymentTest"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "compareCreate2Methods",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testComputeAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testDeployment",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "compareCreate2Methods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testComputeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDeployment",
    data: BytesLike
  ): Result;
}

export namespace AddressComputedEvent {
  export type InputTuple = [
    computed: AddressLike,
    salt: BytesLike,
    bytecodeHash: BytesLike
  ];
  export type OutputTuple = [
    computed: string,
    salt: string,
    bytecodeHash: string
  ];
  export interface OutputObject {
    computed: string;
    salt: string;
    bytecodeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeploymentTestEvent {
  export type InputTuple = [
    deployed: AddressLike,
    expected: AddressLike,
    matches: boolean
  ];
  export type OutputTuple = [
    deployed: string,
    expected: string,
    matches: boolean
  ];
  export interface OutputObject {
    deployed: string;
    expected: string;
    matches: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TronCreate2Test extends BaseContract {
  connect(runner?: ContractRunner | null): TronCreate2Test;
  waitForDeployment(): Promise<this>;

  interface: TronCreate2TestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  compareCreate2Methods: TypedContractMethod<
    [salt: BytesLike, bytecodeHash: BytesLike],
    [[string, string] & { tronAddress: string; ethereumAddress: string }],
    "view"
  >;

  testComputeAddress: TypedContractMethod<
    [salt: BytesLike, bytecodeHash: BytesLike],
    [string],
    "nonpayable"
  >;

  testDeployment: TypedContractMethod<
    [salt: BytesLike],
    [
      [string, string, boolean] & {
        deployed: string;
        expected: string;
        matches: boolean;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "compareCreate2Methods"
  ): TypedContractMethod<
    [salt: BytesLike, bytecodeHash: BytesLike],
    [[string, string] & { tronAddress: string; ethereumAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "testComputeAddress"
  ): TypedContractMethod<
    [salt: BytesLike, bytecodeHash: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testDeployment"
  ): TypedContractMethod<
    [salt: BytesLike],
    [
      [string, string, boolean] & {
        deployed: string;
        expected: string;
        matches: boolean;
      }
    ],
    "nonpayable"
  >;

  getEvent(
    key: "AddressComputed"
  ): TypedContractEvent<
    AddressComputedEvent.InputTuple,
    AddressComputedEvent.OutputTuple,
    AddressComputedEvent.OutputObject
  >;
  getEvent(
    key: "DeploymentTest"
  ): TypedContractEvent<
    DeploymentTestEvent.InputTuple,
    DeploymentTestEvent.OutputTuple,
    DeploymentTestEvent.OutputObject
  >;

  filters: {
    "AddressComputed(address,bytes32,bytes32)": TypedContractEvent<
      AddressComputedEvent.InputTuple,
      AddressComputedEvent.OutputTuple,
      AddressComputedEvent.OutputObject
    >;
    AddressComputed: TypedContractEvent<
      AddressComputedEvent.InputTuple,
      AddressComputedEvent.OutputTuple,
      AddressComputedEvent.OutputObject
    >;

    "DeploymentTest(address,address,bool)": TypedContractEvent<
      DeploymentTestEvent.InputTuple,
      DeploymentTestEvent.OutputTuple,
      DeploymentTestEvent.OutputObject
    >;
    DeploymentTest: TypedContractEvent<
      DeploymentTestEvent.InputTuple,
      DeploymentTestEvent.OutputTuple,
      DeploymentTestEvent.OutputObject
    >;
  };
}
