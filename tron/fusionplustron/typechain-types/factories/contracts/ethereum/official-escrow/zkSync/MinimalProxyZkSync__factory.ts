/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../../../common";
import type {
  MinimalProxyZkSync,
  MinimalProxyZkSyncInterface,
} from "../../../../../contracts/ethereum/official-escrow/zkSync/MinimalProxyZkSync";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
] as const;

const _bytecode =
  "0x60a0601f6100f638819003918201601f19168301916001600160401b038311848410176100685780849260209460405283398101031261006357516001600160a01b0381168103610063576080526040516077908161007f82396080518160100152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600036818037808036817f00000000000000000000000000000000000000000000000000000000000000005af43d82803e15603d573d90f35b3d90fdfea264697066735822122055c87c8fe4745171c04a045085faa48412430cb819aa66ceae43fdb00bb0c21764736f6c63430008170033";

type MinimalProxyZkSyncConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinimalProxyZkSyncConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinimalProxyZkSync__factory extends ContractFactory {
  constructor(...args: MinimalProxyZkSyncConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    implementation: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(implementation, overrides || {});
  }
  override deploy(
    implementation: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(implementation, overrides || {}) as Promise<
      MinimalProxyZkSync & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MinimalProxyZkSync__factory {
    return super.connect(runner) as MinimalProxyZkSync__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinimalProxyZkSyncInterface {
    return new Interface(_abi) as MinimalProxyZkSyncInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MinimalProxyZkSync {
    return new Contract(address, _abi, runner) as unknown as MinimalProxyZkSync;
  }
}
