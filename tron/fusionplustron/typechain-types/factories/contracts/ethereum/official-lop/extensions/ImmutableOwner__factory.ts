/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  ImmutableOwner,
  ImmutableOwnerInterface,
} from "../../../../../contracts/ethereum/official-lop/extensions/ImmutableOwner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_immutableOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "IOAccessDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "IMMUTABLE_OWNER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461006857601f61012538819003918201601f19168301916001600160401b0383118484101761006d5780849260209460405283398101031261006857516001600160a01b03811681036100685760805260405160a1908161008482396080518160380152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080806040526004361015601257600080fd5b600090813560e01c63f3d1372f14602857600080fd5b34606757816003193601126067577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fdfea26469706673582212207f7d4c6d06ea5242ae527391dc4ece69be835b1580ad1f827af0901cfb76415564736f6c63430008170033";

type ImmutableOwnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImmutableOwnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImmutableOwner__factory extends ContractFactory {
  constructor(...args: ImmutableOwnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _immutableOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_immutableOwner, overrides || {});
  }
  override deploy(
    _immutableOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_immutableOwner, overrides || {}) as Promise<
      ImmutableOwner & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ImmutableOwner__factory {
    return super.connect(runner) as ImmutableOwner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImmutableOwnerInterface {
    return new Interface(_abi) as ImmutableOwnerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ImmutableOwner {
    return new Contract(address, _abi, runner) as unknown as ImmutableOwner;
  }
}
