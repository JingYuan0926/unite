"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArbitraryPredicateMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "arg",
                type: "uint256",
            },
        ],
        name: "copyArg",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x60808060405234601457607a908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c631ae4f1b614602657600080fd5b34603f576020366003190112603f576020906004358152f35b600080fdfea2646970667358221220d888c07fb887664c9ecf1baf5241d7ded65b2a3ece5243c1d21cf0d8295aa8c964736f6c63430008170033";
const isSuperArgs = (xs) => xs.length > 1;
class ArbitraryPredicateMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.ArbitraryPredicateMock__factory = ArbitraryPredicateMock__factory;
ArbitraryPredicateMock__factory.bytecode = _bytecode;
ArbitraryPredicateMock__factory.abi = _abi;
//# sourceMappingURL=ArbitraryPredicateMock__factory.js.map