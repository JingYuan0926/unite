"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractionMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "IncorrectTakingAmount",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidExtraDataLength",
        type: "error",
    },
    {
        inputs: [],
        name: "TakingAmountTooHigh",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "arg",
                type: "uint256",
            },
        ],
        name: "copyArg",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "salt",
                        type: "uint256",
                    },
                    {
                        internalType: "Address",
                        name: "maker",
                        type: "uint256",
                    },
                    {
                        internalType: "Address",
                        name: "receiver",
                        type: "uint256",
                    },
                    {
                        internalType: "Address",
                        name: "makerAsset",
                        type: "uint256",
                    },
                    {
                        internalType: "Address",
                        name: "takerAsset",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "makingAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "takingAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "MakerTraits",
                        name: "makerTraits",
                        type: "uint256",
                    },
                ],
                internalType: "struct IOrderMixin.Order",
                name: "",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "extraData",
                type: "bytes",
            },
        ],
        name: "postInteraction",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "salt",
                        type: "uint256",
                    },
                    {
                        internalType: "Address",
                        name: "maker",
                        type: "uint256",
                    },
                    {
                        internalType: "Address",
                        name: "receiver",
                        type: "uint256",
                    },
                    {
                        internalType: "Address",
                        name: "makerAsset",
                        type: "uint256",
                    },
                    {
                        internalType: "Address",
                        name: "takerAsset",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "makingAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "takingAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "MakerTraits",
                        name: "makerTraits",
                        type: "uint256",
                    },
                ],
                internalType: "struct IOrderMixin.Order",
                name: "",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "extraData",
                type: "bytes",
            },
        ],
        name: "preInteraction",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x60808060405234610016576101ea908161001c8239f35b600080fdfe60808060405260048036101561001457600080fd5b600091823560e01c9081630986bdd5146100af575080631ae4f1b6146100915763462ebde21461004357600080fd5b3461008d57602061005336610132565b96509750509694505050501061007c57351061006d575080f35b60405163fb8ae12960e01b8152fd5b6040516319cd0c1f60e11b81528390fd5b5080fd5b503461008d57602036600319011261008d5760209060405190358152f35b9050346100fb576020906100c236610132565b965098975050979450505050106100ed575035036100de575080f35b60405163881db55160e01b8152fd5b6319cd0c1f60e11b81528390fd5b8280fd5b9181601f8401121561012d5782359167ffffffffffffffff831161012d576020838186019501011161012d57565b600080fd5b60031981016101e0811261012d576101001361012d5760049167ffffffffffffffff6101043581811161012d578361016c916004016100ff565b909390926101243592610144356001600160a01b038116810361012d5792610164359261018435926101a435926101c43591821161012d576101b0916004016100ff565b909156fea2646970667358221220dd3dd07013677f6cb5e5f1d4e3ca1b3ab0021dcc2dc25f308a4c232cbf23825464736f6c63430008170033";
const isSuperArgs = (xs) => xs.length > 1;
class InteractionMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.InteractionMock__factory = InteractionMock__factory;
InteractionMock__factory.bytecode = _bytecode;
InteractionMock__factory.abi = _abi;
//# sourceMappingURL=InteractionMock__factory.js.map