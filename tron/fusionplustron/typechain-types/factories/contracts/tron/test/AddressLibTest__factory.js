"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressLibTest__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "input",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "output",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bool",
                name: "success",
                type: "bool",
            },
        ],
        name: "AddressConversion",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "input",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "output",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "reconverted",
                type: "address",
            },
        ],
        name: "AddressValidation",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "addressAsUint",
                type: "uint256",
            },
        ],
        name: "testAddressGet",
        outputs: [
            {
                internalType: "address",
                name: "converted",
                type: "address",
            },
            {
                internalType: "bool",
                name: "success",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "token",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maker",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "taker",
                type: "uint256",
            },
        ],
        name: "testMultipleConversions",
        outputs: [
            {
                internalType: "address",
                name: "tokenAddr",
                type: "address",
            },
            {
                internalType: "address",
                name: "makerAddr",
                type: "address",
            },
            {
                internalType: "address",
                name: "takerAddr",
                type: "address",
            },
            {
                internalType: "bool",
                name: "allSuccess",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "inputAddress",
                type: "address",
            },
        ],
        name: "testRoundTripConversion",
        outputs: [
            {
                internalType: "uint256",
                name: "output",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "reconverted",
                type: "address",
            },
            {
                internalType: "bool",
                name: "matches",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "testZeroAddress",
        outputs: [
            {
                internalType: "uint256",
                name: "zeroAsUint",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "convertedBack",
                type: "address",
            },
            {
                internalType: "bool",
                name: "isZero",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x60808060405234610016576101ce908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081633cff6cb414610126575080636f8f87d2146100ff578063ebec038c146100955763fa5d5ae71461004e57600080fd5b346100915760603660031901126100915780516001600160a01b036004358116825260243581166020830152604435169181019190915260016060820152608090f35b5080fd5b5090346100fc5760203660031901126100fc575080516004358082526001600160a01b031660208201819052600182840152907fe2c3e0a6749e15082ef7af7459d5ac64e533c8c0a760a084a2fda389e0776e2590606090a1815190815260016020820152f35b80fd5b50346100915781600319360112610091579060018260609351928084526020840152820152f35b83915034610091576020366003190112610091576004356001600160a01b03811692908390036100fc57506060927fdd3068fb483aff9de47be875253bca57ba83b4a9e813d620d6bdece8400be83a848385600195528560208201528584820152a18051928084526020840152820152f3fea264697066735822122033e1d782f24a3c39f6e9a5417419f1d6dac3a1f4e01665ffba65c22993a41ed964736f6c63430008170033";
const isSuperArgs = (xs) => xs.length > 1;
class AddressLibTest__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.AddressLibTest__factory = AddressLibTest__factory;
AddressLibTest__factory.bytecode = _bytecode;
AddressLibTest__factory.abi = _abi;
//# sourceMappingURL=AddressLibTest__factory.js.map