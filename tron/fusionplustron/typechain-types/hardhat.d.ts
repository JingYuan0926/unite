/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IDaiLikePermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDaiLikePermit__factory>;
    getContractFactory(
      name: "IERC20MetadataUppercase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUppercase__factory>;
    getContractFactory(
      name: "IERC7597Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC7597Permit__factory>;
    getContractFactory(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPermit2__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "UniERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniERC20__factory>;
    getContractFactory(
      name: "EthReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthReceiver__factory>;
    getContractFactory(
      name: "OnlyWethReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyWethReceiver__factory>;
    getContractFactory(
      name: "PermitAndCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermitAndCall__factory>;
    getContractFactory(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorInterface__factory>;
    getContractFactory(
      name: "AggregatorV2V3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV2V3Interface__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "Clones",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Clones__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "Create2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create2__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProof__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Nonces",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Nonces__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "BaseEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseEscrow__factory>;
    getContractFactory(
      name: "BaseEscrowFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseEscrowFactory__factory>;
    getContractFactory(
      name: "Escrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Escrow__factory>;
    getContractFactory(
      name: "EscrowDst",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscrowDst__factory>;
    getContractFactory(
      name: "EscrowFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscrowFactory__factory>;
    getContractFactory(
      name: "EscrowSrc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscrowSrc__factory>;
    getContractFactory(
      name: "IBaseEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseEscrow__factory>;
    getContractFactory(
      name: "IEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEscrow__factory>;
    getContractFactory(
      name: "IEscrowDst",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEscrowDst__factory>;
    getContractFactory(
      name: "IEscrowFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEscrowFactory__factory>;
    getContractFactory(
      name: "IEscrowSrc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEscrowSrc__factory>;
    getContractFactory(
      name: "IMerkleStorageInvalidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMerkleStorageInvalidator__factory>;
    getContractFactory(
      name: "IOrderMixin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderMixin__factory>;
    getContractFactory(
      name: "IResolverExample",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IResolverExample__factory>;
    getContractFactory(
      name: "MerkleStorageInvalidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleStorageInvalidator__factory>;
    getContractFactory(
      name: "ERC20True",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20True__factory>;
    getContractFactory(
      name: "NoReceiveCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoReceiveCaller__factory>;
    getContractFactory(
      name: "ResolverExample",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolverExample__factory>;
    getContractFactory(
      name: "EscrowDstZkSync",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscrowDstZkSync__factory>;
    getContractFactory(
      name: "EscrowFactoryZkSync",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscrowFactoryZkSync__factory>;
    getContractFactory(
      name: "EscrowSrcZkSync",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscrowSrcZkSync__factory>;
    getContractFactory(
      name: "EscrowZkSync",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EscrowZkSync__factory>;
    getContractFactory(
      name: "MinimalProxyZkSync",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalProxyZkSync__factory>;
    getContractFactory(
      name: "AmountGetterBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AmountGetterBase__factory>;
    getContractFactory(
      name: "AmountGetterWithFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AmountGetterWithFee__factory>;
    getContractFactory(
      name: "ApprovalPreInteraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApprovalPreInteraction__factory>;
    getContractFactory(
      name: "ChainlinkCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkCalculator__factory>;
    getContractFactory(
      name: "DutchAuctionCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DutchAuctionCalculator__factory>;
    getContractFactory(
      name: "ERC1155Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Proxy__factory>;
    getContractFactory(
      name: "ERC721Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Proxy__factory>;
    getContractFactory(
      name: "ERC721ProxySafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721ProxySafe__factory>;
    getContractFactory(
      name: "ETHOrders",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHOrders__factory>;
    getContractFactory(
      name: "FeeTaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeTaker__factory>;
    getContractFactory(
      name: "ImmutableOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableOwner__factory>;
    getContractFactory(
      name: "OrderIdInvalidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderIdInvalidator__factory>;
    getContractFactory(
      name: "Permit2WitnessProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Permit2WitnessProxy__factory>;
    getContractFactory(
      name: "PriorityFeeLimiter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriorityFeeLimiter__factory>;
    getContractFactory(
      name: "RangeAmountCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RangeAmountCalculator__factory>;
    getContractFactory(
      name: "OrderRegistrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderRegistrator__factory>;
    getContractFactory(
      name: "PredicateHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PredicateHelper__factory>;
    getContractFactory(
      name: "SeriesEpochManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeriesEpochManager__factory>;
    getContractFactory(
      name: "SeriesNonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeriesNonceManager__factory>;
    getContractFactory(
      name: "IAmountGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAmountGetter__factory>;
    getContractFactory(
      name: "ICreate3Deployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICreate3Deployer__factory>;
    getContractFactory(
      name: "IOrderMixin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderMixin__factory>;
    getContractFactory(
      name: "IOrderRegistrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderRegistrator__factory>;
    getContractFactory(
      name: "IPermit2WitnessTransferFrom",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPermit2WitnessTransferFrom__factory>;
    getContractFactory(
      name: "IPostInteraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPostInteraction__factory>;
    getContractFactory(
      name: "IPreInteraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPreInteraction__factory>;
    getContractFactory(
      name: "ITakerInteraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITakerInteraction__factory>;
    getContractFactory(
      name: "BitInvalidatorLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BitInvalidatorLib__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "OffsetsLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OffsetsLib__factory>;
    getContractFactory(
      name: "RemainingInvalidatorLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RemainingInvalidatorLib__factory>;
    getContractFactory(
      name: "LimitOrderProtocol",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitOrderProtocol__factory>;
    getContractFactory(
      name: "AggregatorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorMock__factory>;
    getContractFactory(
      name: "ArbitraryPredicateMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitraryPredicateMock__factory>;
    getContractFactory(
      name: "CallsSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallsSimulator__factory>;
    getContractFactory(
      name: "ExtensionMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExtensionMock__factory>;
    getContractFactory(
      name: "HashChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HashChecker__factory>;
    getContractFactory(
      name: "InteractionMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InteractionMock__factory>;
    getContractFactory(
      name: "MakerContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MakerContract__factory>;
    getContractFactory(
      name: "RecursiveMatcher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecursiveMatcher__factory>;
    getContractFactory(
      name: "TakerContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TakerContract__factory>;
    getContractFactory(
      name: "WrappedTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedTokenMock__factory>;
    getContractFactory(
      name: "OrderLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderLib__factory>;
    getContractFactory(
      name: "OrderMixin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderMixin__factory>;
    getContractFactory(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resolver__factory>;
    getContractFactory(
      name: "BaseExtension",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseExtension__factory>;
    getContractFactory(
      name: "ResolverValidationExtension",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolverValidationExtension__factory>;
    getContractFactory(
      name: "TronFusionExtension",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TronFusionExtension__factory>;
    getContractFactory(
      name: "ITronEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITronEscrow__factory>;
    getContractFactory(
      name: "TronEscrowDst",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TronEscrowDst__factory>;
    getContractFactory(
      name: "TronEscrowFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TronEscrowFactory__factory>;
    getContractFactory(
      name: "TronEscrowSrc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TronEscrowSrc__factory>;

    getContractAt(
      name: "IDaiLikePermit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDaiLikePermit>;
    getContractAt(
      name: "IERC20MetadataUppercase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUppercase>;
    getContractAt(
      name: "IERC7597Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC7597Permit>;
    getContractAt(
      name: "IPermit2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPermit2>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "UniERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniERC20>;
    getContractAt(
      name: "EthReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EthReceiver>;
    getContractAt(
      name: "OnlyWethReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyWethReceiver>;
    getContractAt(
      name: "PermitAndCall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PermitAndCall>;
    getContractAt(
      name: "AggregatorInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorInterface>;
    getContractAt(
      name: "AggregatorV2V3Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV2V3Interface>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "Clones",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Clones>;
    getContractAt(
      name: "IERC1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "Create2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Create2>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "MerkleProof",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProof>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Nonces",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Nonces>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "BaseEscrow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseEscrow>;
    getContractAt(
      name: "BaseEscrowFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseEscrowFactory>;
    getContractAt(
      name: "Escrow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Escrow>;
    getContractAt(
      name: "EscrowDst",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EscrowDst>;
    getContractAt(
      name: "EscrowFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EscrowFactory>;
    getContractAt(
      name: "EscrowSrc",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EscrowSrc>;
    getContractAt(
      name: "IBaseEscrow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseEscrow>;
    getContractAt(
      name: "IEscrow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEscrow>;
    getContractAt(
      name: "IEscrowDst",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEscrowDst>;
    getContractAt(
      name: "IEscrowFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEscrowFactory>;
    getContractAt(
      name: "IEscrowSrc",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEscrowSrc>;
    getContractAt(
      name: "IMerkleStorageInvalidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMerkleStorageInvalidator>;
    getContractAt(
      name: "IOrderMixin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderMixin>;
    getContractAt(
      name: "IResolverExample",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IResolverExample>;
    getContractAt(
      name: "MerkleStorageInvalidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleStorageInvalidator>;
    getContractAt(
      name: "ERC20True",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20True>;
    getContractAt(
      name: "NoReceiveCaller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NoReceiveCaller>;
    getContractAt(
      name: "ResolverExample",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolverExample>;
    getContractAt(
      name: "EscrowDstZkSync",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EscrowDstZkSync>;
    getContractAt(
      name: "EscrowFactoryZkSync",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EscrowFactoryZkSync>;
    getContractAt(
      name: "EscrowSrcZkSync",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EscrowSrcZkSync>;
    getContractAt(
      name: "EscrowZkSync",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EscrowZkSync>;
    getContractAt(
      name: "MinimalProxyZkSync",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalProxyZkSync>;
    getContractAt(
      name: "AmountGetterBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AmountGetterBase>;
    getContractAt(
      name: "AmountGetterWithFee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AmountGetterWithFee>;
    getContractAt(
      name: "ApprovalPreInteraction",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ApprovalPreInteraction>;
    getContractAt(
      name: "ChainlinkCalculator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkCalculator>;
    getContractAt(
      name: "DutchAuctionCalculator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DutchAuctionCalculator>;
    getContractAt(
      name: "ERC1155Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Proxy>;
    getContractAt(
      name: "ERC721Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Proxy>;
    getContractAt(
      name: "ERC721ProxySafe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721ProxySafe>;
    getContractAt(
      name: "ETHOrders",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHOrders>;
    getContractAt(
      name: "FeeTaker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeTaker>;
    getContractAt(
      name: "ImmutableOwner",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableOwner>;
    getContractAt(
      name: "OrderIdInvalidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderIdInvalidator>;
    getContractAt(
      name: "Permit2WitnessProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Permit2WitnessProxy>;
    getContractAt(
      name: "PriorityFeeLimiter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriorityFeeLimiter>;
    getContractAt(
      name: "RangeAmountCalculator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RangeAmountCalculator>;
    getContractAt(
      name: "OrderRegistrator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderRegistrator>;
    getContractAt(
      name: "PredicateHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PredicateHelper>;
    getContractAt(
      name: "SeriesEpochManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SeriesEpochManager>;
    getContractAt(
      name: "SeriesNonceManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SeriesNonceManager>;
    getContractAt(
      name: "IAmountGetter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAmountGetter>;
    getContractAt(
      name: "ICreate3Deployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICreate3Deployer>;
    getContractAt(
      name: "IOrderMixin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderMixin>;
    getContractAt(
      name: "IOrderRegistrator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderRegistrator>;
    getContractAt(
      name: "IPermit2WitnessTransferFrom",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPermit2WitnessTransferFrom>;
    getContractAt(
      name: "IPostInteraction",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPostInteraction>;
    getContractAt(
      name: "IPreInteraction",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPreInteraction>;
    getContractAt(
      name: "ITakerInteraction",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITakerInteraction>;
    getContractAt(
      name: "BitInvalidatorLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BitInvalidatorLib>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "OffsetsLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OffsetsLib>;
    getContractAt(
      name: "RemainingInvalidatorLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RemainingInvalidatorLib>;
    getContractAt(
      name: "LimitOrderProtocol",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitOrderProtocol>;
    getContractAt(
      name: "AggregatorMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorMock>;
    getContractAt(
      name: "ArbitraryPredicateMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitraryPredicateMock>;
    getContractAt(
      name: "CallsSimulator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CallsSimulator>;
    getContractAt(
      name: "ExtensionMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExtensionMock>;
    getContractAt(
      name: "HashChecker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HashChecker>;
    getContractAt(
      name: "InteractionMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InteractionMock>;
    getContractAt(
      name: "MakerContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MakerContract>;
    getContractAt(
      name: "RecursiveMatcher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RecursiveMatcher>;
    getContractAt(
      name: "TakerContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TakerContract>;
    getContractAt(
      name: "WrappedTokenMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedTokenMock>;
    getContractAt(
      name: "OrderLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderLib>;
    getContractAt(
      name: "OrderMixin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderMixin>;
    getContractAt(
      name: "Resolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Resolver>;
    getContractAt(
      name: "BaseExtension",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseExtension>;
    getContractAt(
      name: "ResolverValidationExtension",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolverValidationExtension>;
    getContractAt(
      name: "TronFusionExtension",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TronFusionExtension>;
    getContractAt(
      name: "ITronEscrow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITronEscrow>;
    getContractAt(
      name: "TronEscrowDst",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TronEscrowDst>;
    getContractAt(
      name: "TronEscrowFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TronEscrowFactory>;
    getContractAt(
      name: "TronEscrowSrc",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TronEscrowSrc>;

    deployContract(
      name: "IDaiLikePermit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDaiLikePermit>;
    deployContract(
      name: "IERC20MetadataUppercase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUppercase>;
    deployContract(
      name: "IERC7597Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC7597Permit>;
    deployContract(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "UniERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniERC20>;
    deployContract(
      name: "EthReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthReceiver>;
    deployContract(
      name: "OnlyWethReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OnlyWethReceiver>;
    deployContract(
      name: "PermitAndCall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermitAndCall>;
    deployContract(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorInterface>;
    deployContract(
      name: "AggregatorV2V3Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV2V3Interface>;
    deployContract(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "Clones",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Clones>;
    deployContract(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "Create2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create2>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Nonces",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Nonces>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "BaseEscrow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseEscrow>;
    deployContract(
      name: "BaseEscrowFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseEscrowFactory>;
    deployContract(
      name: "Escrow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Escrow>;
    deployContract(
      name: "EscrowDst",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowDst>;
    deployContract(
      name: "EscrowFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowFactory>;
    deployContract(
      name: "EscrowSrc",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowSrc>;
    deployContract(
      name: "IBaseEscrow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseEscrow>;
    deployContract(
      name: "IEscrow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEscrow>;
    deployContract(
      name: "IEscrowDst",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEscrowDst>;
    deployContract(
      name: "IEscrowFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEscrowFactory>;
    deployContract(
      name: "IEscrowSrc",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEscrowSrc>;
    deployContract(
      name: "IMerkleStorageInvalidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMerkleStorageInvalidator>;
    deployContract(
      name: "IOrderMixin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderMixin>;
    deployContract(
      name: "IResolverExample",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IResolverExample>;
    deployContract(
      name: "MerkleStorageInvalidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleStorageInvalidator>;
    deployContract(
      name: "ERC20True",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20True>;
    deployContract(
      name: "NoReceiveCaller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NoReceiveCaller>;
    deployContract(
      name: "ResolverExample",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ResolverExample>;
    deployContract(
      name: "EscrowDstZkSync",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowDstZkSync>;
    deployContract(
      name: "EscrowFactoryZkSync",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowFactoryZkSync>;
    deployContract(
      name: "EscrowSrcZkSync",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowSrcZkSync>;
    deployContract(
      name: "EscrowZkSync",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowZkSync>;
    deployContract(
      name: "MinimalProxyZkSync",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinimalProxyZkSync>;
    deployContract(
      name: "AmountGetterBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AmountGetterBase>;
    deployContract(
      name: "AmountGetterWithFee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AmountGetterWithFee>;
    deployContract(
      name: "ApprovalPreInteraction",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ApprovalPreInteraction>;
    deployContract(
      name: "ChainlinkCalculator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainlinkCalculator>;
    deployContract(
      name: "DutchAuctionCalculator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DutchAuctionCalculator>;
    deployContract(
      name: "ERC1155Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Proxy>;
    deployContract(
      name: "ERC721Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Proxy>;
    deployContract(
      name: "ERC721ProxySafe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721ProxySafe>;
    deployContract(
      name: "ETHOrders",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ETHOrders>;
    deployContract(
      name: "FeeTaker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeTaker>;
    deployContract(
      name: "ImmutableOwner",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ImmutableOwner>;
    deployContract(
      name: "OrderIdInvalidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderIdInvalidator>;
    deployContract(
      name: "Permit2WitnessProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Permit2WitnessProxy>;
    deployContract(
      name: "PriorityFeeLimiter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriorityFeeLimiter>;
    deployContract(
      name: "RangeAmountCalculator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RangeAmountCalculator>;
    deployContract(
      name: "OrderRegistrator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderRegistrator>;
    deployContract(
      name: "PredicateHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PredicateHelper>;
    deployContract(
      name: "SeriesEpochManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SeriesEpochManager>;
    deployContract(
      name: "SeriesNonceManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SeriesNonceManager>;
    deployContract(
      name: "IAmountGetter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAmountGetter>;
    deployContract(
      name: "ICreate3Deployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICreate3Deployer>;
    deployContract(
      name: "IOrderMixin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderMixin>;
    deployContract(
      name: "IOrderRegistrator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderRegistrator>;
    deployContract(
      name: "IPermit2WitnessTransferFrom",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2WitnessTransferFrom>;
    deployContract(
      name: "IPostInteraction",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPostInteraction>;
    deployContract(
      name: "IPreInteraction",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPreInteraction>;
    deployContract(
      name: "ITakerInteraction",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITakerInteraction>;
    deployContract(
      name: "BitInvalidatorLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BitInvalidatorLib>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "OffsetsLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OffsetsLib>;
    deployContract(
      name: "RemainingInvalidatorLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RemainingInvalidatorLib>;
    deployContract(
      name: "LimitOrderProtocol",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LimitOrderProtocol>;
    deployContract(
      name: "AggregatorMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorMock>;
    deployContract(
      name: "ArbitraryPredicateMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbitraryPredicateMock>;
    deployContract(
      name: "CallsSimulator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CallsSimulator>;
    deployContract(
      name: "ExtensionMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExtensionMock>;
    deployContract(
      name: "HashChecker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HashChecker>;
    deployContract(
      name: "InteractionMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InteractionMock>;
    deployContract(
      name: "MakerContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MakerContract>;
    deployContract(
      name: "RecursiveMatcher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecursiveMatcher>;
    deployContract(
      name: "TakerContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TakerContract>;
    deployContract(
      name: "WrappedTokenMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WrappedTokenMock>;
    deployContract(
      name: "OrderLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderLib>;
    deployContract(
      name: "OrderMixin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderMixin>;
    deployContract(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Resolver>;
    deployContract(
      name: "BaseExtension",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseExtension>;
    deployContract(
      name: "ResolverValidationExtension",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ResolverValidationExtension>;
    deployContract(
      name: "TronFusionExtension",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TronFusionExtension>;
    deployContract(
      name: "ITronEscrow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITronEscrow>;
    deployContract(
      name: "TronEscrowDst",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TronEscrowDst>;
    deployContract(
      name: "TronEscrowFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TronEscrowFactory>;
    deployContract(
      name: "TronEscrowSrc",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TronEscrowSrc>;

    deployContract(
      name: "IDaiLikePermit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDaiLikePermit>;
    deployContract(
      name: "IERC20MetadataUppercase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUppercase>;
    deployContract(
      name: "IERC7597Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC7597Permit>;
    deployContract(
      name: "IPermit2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "UniERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniERC20>;
    deployContract(
      name: "EthReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthReceiver>;
    deployContract(
      name: "OnlyWethReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OnlyWethReceiver>;
    deployContract(
      name: "PermitAndCall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermitAndCall>;
    deployContract(
      name: "AggregatorInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorInterface>;
    deployContract(
      name: "AggregatorV2V3Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV2V3Interface>;
    deployContract(
      name: "AggregatorV3Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "Clones",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Clones>;
    deployContract(
      name: "IERC1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "Create2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create2>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "MerkleProof",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Nonces",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Nonces>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "BaseEscrow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseEscrow>;
    deployContract(
      name: "BaseEscrowFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseEscrowFactory>;
    deployContract(
      name: "Escrow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Escrow>;
    deployContract(
      name: "EscrowDst",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowDst>;
    deployContract(
      name: "EscrowFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowFactory>;
    deployContract(
      name: "EscrowSrc",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowSrc>;
    deployContract(
      name: "IBaseEscrow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseEscrow>;
    deployContract(
      name: "IEscrow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEscrow>;
    deployContract(
      name: "IEscrowDst",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEscrowDst>;
    deployContract(
      name: "IEscrowFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEscrowFactory>;
    deployContract(
      name: "IEscrowSrc",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEscrowSrc>;
    deployContract(
      name: "IMerkleStorageInvalidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMerkleStorageInvalidator>;
    deployContract(
      name: "IOrderMixin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderMixin>;
    deployContract(
      name: "IResolverExample",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IResolverExample>;
    deployContract(
      name: "MerkleStorageInvalidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleStorageInvalidator>;
    deployContract(
      name: "ERC20True",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20True>;
    deployContract(
      name: "NoReceiveCaller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NoReceiveCaller>;
    deployContract(
      name: "ResolverExample",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ResolverExample>;
    deployContract(
      name: "EscrowDstZkSync",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowDstZkSync>;
    deployContract(
      name: "EscrowFactoryZkSync",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowFactoryZkSync>;
    deployContract(
      name: "EscrowSrcZkSync",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowSrcZkSync>;
    deployContract(
      name: "EscrowZkSync",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EscrowZkSync>;
    deployContract(
      name: "MinimalProxyZkSync",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinimalProxyZkSync>;
    deployContract(
      name: "AmountGetterBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AmountGetterBase>;
    deployContract(
      name: "AmountGetterWithFee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AmountGetterWithFee>;
    deployContract(
      name: "ApprovalPreInteraction",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ApprovalPreInteraction>;
    deployContract(
      name: "ChainlinkCalculator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainlinkCalculator>;
    deployContract(
      name: "DutchAuctionCalculator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DutchAuctionCalculator>;
    deployContract(
      name: "ERC1155Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Proxy>;
    deployContract(
      name: "ERC721Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Proxy>;
    deployContract(
      name: "ERC721ProxySafe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721ProxySafe>;
    deployContract(
      name: "ETHOrders",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ETHOrders>;
    deployContract(
      name: "FeeTaker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeTaker>;
    deployContract(
      name: "ImmutableOwner",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ImmutableOwner>;
    deployContract(
      name: "OrderIdInvalidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderIdInvalidator>;
    deployContract(
      name: "Permit2WitnessProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Permit2WitnessProxy>;
    deployContract(
      name: "PriorityFeeLimiter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriorityFeeLimiter>;
    deployContract(
      name: "RangeAmountCalculator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RangeAmountCalculator>;
    deployContract(
      name: "OrderRegistrator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderRegistrator>;
    deployContract(
      name: "PredicateHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PredicateHelper>;
    deployContract(
      name: "SeriesEpochManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SeriesEpochManager>;
    deployContract(
      name: "SeriesNonceManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SeriesNonceManager>;
    deployContract(
      name: "IAmountGetter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAmountGetter>;
    deployContract(
      name: "ICreate3Deployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICreate3Deployer>;
    deployContract(
      name: "IOrderMixin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderMixin>;
    deployContract(
      name: "IOrderRegistrator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderRegistrator>;
    deployContract(
      name: "IPermit2WitnessTransferFrom",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2WitnessTransferFrom>;
    deployContract(
      name: "IPostInteraction",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPostInteraction>;
    deployContract(
      name: "IPreInteraction",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPreInteraction>;
    deployContract(
      name: "ITakerInteraction",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITakerInteraction>;
    deployContract(
      name: "BitInvalidatorLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BitInvalidatorLib>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "OffsetsLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OffsetsLib>;
    deployContract(
      name: "RemainingInvalidatorLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RemainingInvalidatorLib>;
    deployContract(
      name: "LimitOrderProtocol",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LimitOrderProtocol>;
    deployContract(
      name: "AggregatorMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorMock>;
    deployContract(
      name: "ArbitraryPredicateMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbitraryPredicateMock>;
    deployContract(
      name: "CallsSimulator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CallsSimulator>;
    deployContract(
      name: "ExtensionMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExtensionMock>;
    deployContract(
      name: "HashChecker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HashChecker>;
    deployContract(
      name: "InteractionMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InteractionMock>;
    deployContract(
      name: "MakerContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MakerContract>;
    deployContract(
      name: "RecursiveMatcher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecursiveMatcher>;
    deployContract(
      name: "TakerContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TakerContract>;
    deployContract(
      name: "WrappedTokenMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WrappedTokenMock>;
    deployContract(
      name: "OrderLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderLib>;
    deployContract(
      name: "OrderMixin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderMixin>;
    deployContract(
      name: "Resolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Resolver>;
    deployContract(
      name: "BaseExtension",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseExtension>;
    deployContract(
      name: "ResolverValidationExtension",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ResolverValidationExtension>;
    deployContract(
      name: "TronFusionExtension",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TronFusionExtension>;
    deployContract(
      name: "ITronEscrow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITronEscrow>;
    deployContract(
      name: "TronEscrowDst",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TronEscrowDst>;
    deployContract(
      name: "TronEscrowFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TronEscrowFactory>;
    deployContract(
      name: "TronEscrowSrc",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TronEscrowSrc>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
